// Code generated by MockGen. DO NOT EDIT.
// Source: ./webook/internal/repository/dao/article.go
//
// Generated by this command:
//
//	mockgen -source=./webook/internal/repository/dao/article.go -package=daomocks -destination=./webook/internal/repository/dao/mocks/article.mock.go
//
// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	dao "geek-basic-go/webook/internal/repository/dao"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockArticleDao is a mock of ArticleDao interface.
type MockArticleDao struct {
	ctrl     *gomock.Controller
	recorder *MockArticleDaoMockRecorder
}

// MockArticleDaoMockRecorder is the mock recorder for MockArticleDao.
type MockArticleDaoMockRecorder struct {
	mock *MockArticleDao
}

// NewMockArticleDao creates a new mock instance.
func NewMockArticleDao(ctrl *gomock.Controller) *MockArticleDao {
	mock := &MockArticleDao{ctrl: ctrl}
	mock.recorder = &MockArticleDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleDao) EXPECT() *MockArticleDaoMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockArticleDao) Insert(ctx context.Context, art dao.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockArticleDaoMockRecorder) Insert(ctx, art any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockArticleDao)(nil).Insert), ctx, art)
}

// UpdateById mocks base method.
func (m *MockArticleDao) UpdateById(ctx context.Context, art dao.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockArticleDaoMockRecorder) UpdateById(ctx, art any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockArticleDao)(nil).UpdateById), ctx, art)
}
